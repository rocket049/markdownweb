<html>
<head>
<meta http-equiv="content-type" content="text/html;charset=utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link type="text/css" rel="stylesheet" href="/style.css"/>
<title>rpc2d - go语言双向 RPC 调用的库 测试</title>
<head>
<body>
<div class="all" id='all'>
 <div class="screen" id="screen">
  <ul id="ul">
  <li class="screen"><img class="screen" src='/images/1.png' alt='安全日记本' width='760' height='200' onclick='window.open("http://rocket049.cn/secret-diary.md")' /></li><li class="screen"><img class="screen" src='/images/2.png' alt='“海战炮手”游戏' width='760' height='200' onclick='window.open("http://rocket049.cn/shipgunner.md")' /></li>
  </ul>
  <ol></ol>
  <div id="arr">
   <span id="left">&lt;</span>
   <span id="right">&gt;</span>
  </div>
 </div>
</div>
<h1>rpc2d - go语言双向 RPC 调用的库</h1>

<p>用数据流重定向的方法实现双向 RPC 调用，高效的实现从服务器 CALLBACK 客户端 API，基于 &ldquo;net/rpc&rdquo; 原生库。</p>

<p>安装： <code>go get gitee.com/rocket049/rpc2d</code> 或者<code>go get github.com/rocket049/rpc2d</code></p>

<p>###提供下列 API 和类型</p>

<pre><code>type ProviderType struct {
	Client *rpc.Client
	Data   interface{}
}
type RpcNode struct {
	Server         *rpc.Server
	Client         *rpc.Client
	//private field
}
func Accept(l net.Listener, provider interface{}) (*RpcNode, error)
func NewRpcNode(provider interface{}) *RpcNode
func (self *RpcNode) Close()
func (self *RpcNode) Dial(addr string) error
</code></pre>

<p>###示例</p>

<pre><code>//server.go
package main

import (
	&quot;fmt&quot;
	&quot;log&quot;
	&quot;net&quot;

	&quot;gitee.com/rocket049/rpc2d&quot;
)

type Server rpc2d.ProviderType

var count = 0

func (self *Server) Show(arg string, reply *int) error {
	fmt.Printf(&quot;Recv: %s, count: %d\n&quot;, arg, count)
	*reply = count
	count++
	var ret int
	self.Client.Call(&quot;Client.Show&quot;, fmt.Sprintf(&quot;callback:%s.&quot;, arg), &amp;ret)
	return nil
}

func main() {
	l, err := net.Listen(&quot;tcp&quot;, &quot;127.0.0.1:5678&quot;)
	if err != nil {
		log.Fatal(&quot;Listen:&quot;, err)
	}
	defer l.Close()
	p := new(Server)
	node1, err := rpc2d.Accept(l, p)
	if err != nil {
		log.Fatal(&quot;Accept:&quot;, err)
	}
	defer node1.Close()
	p.Client = node1.Client
	var s string
	var ret int
	for i := 0; i &lt; 5; i++ {
		s = fmt.Sprintf(&quot;server message %d\n&quot;, i)
		node1.Client.Call(&quot;Client.Show&quot;, s, &amp;ret)
		fmt.Printf(&quot;Return:%d\n&quot;, ret)
	}

	select {}
}


//client.go
package main

import (
	&quot;fmt&quot;
	&quot;log&quot;

	&quot;gitee.com/rocket049/rpc2d&quot;
)

type Client int

var count = 10

func (self *Client) Show(arg string, reply *int) error {
	fmt.Printf(&quot;Recv: %s\n&quot;, arg)
	*reply = count
	count++
	return nil
}

func main() {
	p := new(Client)
	node1 := rpc2d.NewRpcNode(p)
	err := node1.Dial(&quot;127.0.0.1:5678&quot;)
	if err != nil {
		log.Fatal(&quot;Dial:&quot;, err)
	}
	//p.Client = node1.Client
	defer node1.Close()
	var s string
	var ret int
	for i := 0; i &lt; 5; i++ {
		s = fmt.Sprintf(&quot;client message %d\n&quot;, i)
		node1.Client.Call(&quot;Server.Show&quot;, s, &amp;ret)
		fmt.Printf(&quot;Return: %d\n&quot;, ret)
	}
	select {}
}

</code></pre>

<div style="background:#E8E7E3;padding:20px 0;">
  <div style="font-size:x-small;text-align:center">备案号：苏ICP备19034936号 &nbsp;&nbsp; 站长邮箱：fuhuizn@163.com</div>
  <div style="width:300px;margin:0 auto;font-size:x-small;">
		 		<a target="_blank" href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=32050702010684" style="display:inline-block;text-decoration:none;height:20px;line-height:20px;"><img src="/bei-an.png" style="float:left;"/><p style="float:left;height:20px;line-height:20px;margin: 0px 0px 0px 5px; color:black;">苏公网安备 32050702010684号</p></a>
		 	</div>
</div>
<script src="/ad.js"></script>
</body>
</html>